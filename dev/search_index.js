var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = RayTracingWeekend","category":"page"},{"location":"#RayTracingWeekend","page":"Home","title":"RayTracingWeekend","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RayTracingWeekend.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RayTracingWeekend]","category":"page"},{"location":"#RayTracingWeekend.Camera","page":"Home","title":"RayTracingWeekend.Camera","text":"Camera object with specification for origin, horizontal and vertical vectors.      We can use the camera object to generate rays along each (u,v) pixels.\n\n\n\n\n\n","category":"type"},{"location":"#RayTracingWeekend.HitRecord","page":"Home","title":"RayTracingWeekend.HitRecord","text":"HitRecord stores information on the point of impact for a ray.\nThis includes where ray hits, \"t\" in o+d(t), surface normal \nand where the impact was like the front side or back side.\n\n\n\n\n\n","category":"type"},{"location":"#RayTracingWeekend.HitRecord2","page":"Home","title":"RayTracingWeekend.HitRecord2","text":"HitRecord2 stores material inaddition to details present in HitRecord. \n\n\n\n\n\n","category":"type"},{"location":"#RayTracingWeekend.Ray","page":"Home","title":"RayTracingWeekend.Ray","text":"r = Ray(origin, direction)\nr.origin ::Point{Float32}\nr.direction ::Vec{Float32}\nat(r::Ray, t::Float32) ::Point\n\nRays simulate the physical rays, they have a direction and origin. The value t will give you a point along the ray in positive and negative direction.\n\n\n\n\n\n","category":"type"},{"location":"#RayTracingWeekend.Sphere","page":"Home","title":"RayTracingWeekend.Sphere","text":"Sphere stores information on center and radius. \n\n\n\n\n\n","category":"type"},{"location":"#RayTracingWeekend.Sphere2","page":"Home","title":"RayTracingWeekend.Sphere2","text":"Sphere2 stores material inaddition to center and radius. \n\n\n\n\n\n","category":"type"},{"location":"#RayTracingWeekend.at-Tuple{Ray, Float32}","page":"Home","title":"RayTracingWeekend.at","text":"at(ray, t) returns the point in 3D of ray at t. \n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_camera-Tuple{Float32, Float32}","page":"Home","title":"RayTracingWeekend.get_camera","text":"Create a camera object from vfov and aspect_ratio.\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_camera-Tuple{Point{Float32}, Point{Float32}, Vec{Float32}, Float32, Float32, Float32, Float32}","page":"Home","title":"RayTracingWeekend.get_camera","text":"Get a Camera2 object that is looking from lookfrom and looking at lookat.   Additionally vup viewup is provided to allow for rotations.   The camera can do defocus blur, by generating random scene rays    originating from inside a disk centered at the lookfrom point.\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_camera-Tuple{Point{Float32}, Point{Float32}, Vec{Float32}, Float32, Float32}","page":"Home","title":"RayTracingWeekend.get_camera","text":"Get a camera that is looking from lookfrom and looking at lookat. Additionally vup viewup is provided to allow for rotations.\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_camera-Tuple{}","page":"Home","title":"RayTracingWeekend.get_camera","text":"Create a camera object from aspectratio, viewportheight and focal_length\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_hit_record-Tuple{Material}","page":"Home","title":"RayTracingWeekend.get_hit_record","text":"Get a HitRecord2 object with default values, and a given material (since material is abstract).\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_hit_record-Tuple{}","page":"Home","title":"RayTracingWeekend.get_hit_record","text":"Get a HitRecord object with default values.\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_ray-Tuple{Camera, Float32, Float32}","page":"Home","title":"RayTracingWeekend.get_ray","text":"Create a ray based on u, v inputs on the camera\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_ray-Tuple{Camera2, Float32, Float32}","page":"Home","title":"RayTracingWeekend.get_ray","text":"Create a ray based on s, t inputs on camera2\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_sampled_color-Tuple{ColorTypes.RGB{Float32}, Int32}","page":"Home","title":"RayTracingWeekend.get_sampled_color","text":"get_sampled_color applies gamma correction and scales the pixel color by the number of samples taken.\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.hit!-Tuple{Union{Sphere, Sphere2}, Ray, Float32, Float32, Union{HitRecord, HitRecord2}}","page":"Home","title":"RayTracingWeekend.hit!","text":"hit! function for sphere, calculates the impact location, normal etc on HitRecord `rec`\nfor the `ray`. \n- This function will update values on rec on a successful hit.\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.hit-Tuple{Vector{<:Hittable}, Ray, Float32, Float32, Union{HitRecord, HitRecord2}}","page":"Home","title":"RayTracingWeekend.hit","text":"Apply ray hit on all the objects in the scene. \n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.len-Tuple{Union{Point, Vec}}","page":"Home","title":"RayTracingWeekend.len","text":"len(p1::Union{Point, Vec}) -> Real\n\nReturns the √(x² + y² + z²)\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.len_squared-Tuple{Union{Point, Vec}}","page":"Home","title":"RayTracingWeekend.len_squared","text":"len_squared(p1::Union{Point, Vec}) -> Real\n\nReturns x² + y² + z²\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.random_in_unit_disk-Tuple{}","page":"Home","title":"RayTracingWeekend.random_in_unit_disk","text":"Get a random vector inside a disk of unit size. \n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.random_vector-Tuple{Float32, Float32}","page":"Home","title":"RayTracingWeekend.random_vector","text":"random vector with values between min and max\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.set_hit_record-Tuple{HitRecord, HitRecord}","page":"Home","title":"RayTracingWeekend.set_hit_record","text":"Set the source HitRecord to be same as the destination HitRecord.\nEquivalent of copy constructor in C++. (Harish: maybe slow?)\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.set_hit_record-Tuple{HitRecord, Point{Float32}, Vec{Float32}, Float32, Bool}","page":"Home","title":"RayTracingWeekend.set_hit_record","text":"Set HitRecord `rec` to the arguments passed.\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.set_hit_record-Tuple{HitRecord2, HitRecord2}","page":"Home","title":"RayTracingWeekend.set_hit_record","text":"Set the source HitRecord2 to be same as the destination HitRecord2.\nEquivalent of copy constructor in C++. (Harish: maybe slow?)\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.set_hit_record-Tuple{HitRecord2, Point{Float32}, Vec{Float32}, Float32, Bool, Material}","page":"Home","title":"RayTracingWeekend.set_hit_record","text":"sethitrecord sets fields inside HitRecord2 rec to the arguments passed\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.sky_color-Tuple{Ray}","page":"Home","title":"RayTracingWeekend.sky_color","text":"The skycolor(ray) function linearly blends white and blue depending on the height of the y coordinate after scaling the ray direction to unit length.    skycolor(r::Ray) -> ::RGB{Float32}\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.to_point-Tuple{Vec{Float32}}","page":"Home","title":"RayTracingWeekend.to_point","text":"Convert a vec to a point \n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.to_vec-Tuple{Point{Float32}}","page":"Home","title":"RayTracingWeekend.to_vec","text":"Convert a point to a vector (subtract from Vec(0.0, 0.0, 0.0)) \n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.unit_vector-Tuple{Vec{Float32}}","page":"Home","title":"RayTracingWeekend.unit_vector","text":"Normalized the given vector v, len after normalization is 1. \n\n\n\n\n\n","category":"method"}]
}
