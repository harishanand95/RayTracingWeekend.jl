var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = RayTracingWeekend","category":"page"},{"location":"#RayTracingWeekend","page":"Home","title":"RayTracingWeekend","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RayTracingWeekend.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RayTracingWeekend]","category":"page"},{"location":"#RayTracingWeekend.Camera","page":"Home","title":"RayTracingWeekend.Camera","text":"Camera object with specification for origin, horizontal and vertical vectors.      We can use the camera object to generate rays along each (u,v) pixels.\n\n\n\n\n\n","category":"type"},{"location":"#RayTracingWeekend.HitRecord","page":"Home","title":"RayTracingWeekend.HitRecord","text":"HitRecord stores information on the point of impact for a ray.\nThis includes where ray hits, \"t\" in o+d(t), surface normal \nand where the impact was like the front side or back side.\n\n\n\n\n\n","category":"type"},{"location":"#RayTracingWeekend.HitRecord2","page":"Home","title":"RayTracingWeekend.HitRecord2","text":"HitRecord2 stores material inaddition to details present in HitRecord. \n\n\n\n\n\n","category":"type"},{"location":"#RayTracingWeekend.Ray","page":"Home","title":"RayTracingWeekend.Ray","text":"r = Ray(origin, direction)\nr.origin ::Point \nr.direction ::Vec \nat(r::Ray, t::Float32) ::Point\n\nRays simulate the physical rays, they have a direction and origin. The value t will give you a point along the ray in positive and negative direction.\n\n\n\n\n\n","category":"type"},{"location":"#RayTracingWeekend.Sphere","page":"Home","title":"RayTracingWeekend.Sphere","text":"Sphere stores information on center and radius. \n\n\n\n\n\n","category":"type"},{"location":"#RayTracingWeekend.Sphere2","page":"Home","title":"RayTracingWeekend.Sphere2","text":"Sphere2 stores material inaddition to center and radius. \n\n\n\n\n\n","category":"type"},{"location":"#Base.:*-Tuple{RayTracingWeekend.AbstractXYZ, Real}","page":"Home","title":"Base.:*","text":"Real * p::XYZ -> p::XYZ\n\nReturn a XYZ (Point, Vec) multiplied by a real.\n\nx = Vec{Int32}(1.0, 2.0, 3.0) x2 = x * 2 x2 = 2 * x\n\n\n\n\n\n","category":"method"},{"location":"#Base.:+-Tuple{RayTracingWeekend.AbstractXYZ, RayTracingWeekend.AbstractXYZ}","page":"Home","title":"Base.:+","text":"p3::AbstractXYZ = p1::AbstractXYZ + p2::AbstractXYZ\n\nAdds p1 and p2 and returns a new AbstractXYZ (Point, Vec).\n\nThere are 3 cases to consider:\n\nAddition of 2 points\nAddition of a point and vec\nAddition of 2 vectors\n\nAddition is not defined for XYZ type.\n\nx1 = Point{Float64}(1.0, 2.0, 3.0)   x2 = Vec{Int32}(1.0, 2.0, 3.0)   print(x1 + x2)\n\nx1 = Vec{Float64}(1.0, 2.0, 3.0)   x2 = Vec{Int32}(1.0, 2.0, 3.0)   print(x1 + x2)\n\nx1 = Point{Int32}(1.0, 2.0, 3.0)   x2 = Point{Int32}(1.0, 2.0, 3.0)   print(x1 + x2)\n\n\n\n\n\n","category":"method"},{"location":"#Base.:--Tuple{RayTracingWeekend.AbstractXYZ, RayTracingWeekend.AbstractXYZ}","page":"Home","title":"Base.:-","text":"p3::AbstractXYZ = p1::AbstractXYZ - p2:AbstractXYZ\n\nSubtract p1 from p2, and return a new (Point, Vec).\n\nCheck addition docs to determine for more details.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:--Tuple{RayTracingWeekend.AbstractXYZ}","page":"Home","title":"Base.:-","text":"- p::XYZ -> -p::XYZ\n\nReturn a negative value of the given XYZ (Point, Vec).\n\n\n\n\n\n","category":"method"},{"location":"#Base.:/-Tuple{RayTracingWeekend.AbstractXYZ, Real}","page":"Home","title":"Base.:/","text":"p::AbstractXYZ / r::Real -> p::AbstractXYZ\n\nReturns a AbstractXYZ (Point, Vec) divided by a real r.\n\nx = Vec{Int32}(1.0, 2.0, 3.0) div_x = x/2.0 Vec{Float64}(0.5, 1.0, 1.5)\n\n\n\n\n\n","category":"method"},{"location":"#Base.:==-Tuple{RayTracingWeekend.AbstractXYZ, RayTracingWeekend.AbstractXYZ}","page":"Home","title":"Base.:==","text":"p1::AbstractXYZ == p2::AbstractXYZ\n\nCheck whether the given 2 AbstractXYZ (Point, Vec) are equal.\n\n\n\n\n\n","category":"method"},{"location":"#Base.print-Tuple{RayTracingWeekend.AbstractXYZ}","page":"Home","title":"Base.print","text":"print(p<:AbstractXYZ) Prints the struct (Point, Vec) with values.\n\nx = XYZ{Float64}(1.0, 2.0, 3.0) print(x)\n\nx = Point{Float64}(1.0, 2.0, 3.0) print(x)\n\nx = Vec{Float64}(1.0, 2.0, 3.0) print(x)\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.:×-Tuple{RayTracingWeekend.AbstractVec, RayTracingWeekend.AbstractVec}","page":"Home","title":"RayTracingWeekend.:×","text":"p1::AbstractVec × p2::AbstractVec -> ::AbstractVec\n\nCross product of 2 vectors, return a new vector\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.:⋅-Tuple{RayTracingWeekend.AbstractVec, RayTracingWeekend.AbstractVec}","page":"Home","title":"RayTracingWeekend.:⋅","text":"p1::AbstractVec ⋅ p2::AbstractVec -> Float32\n\nReturns the result of dot product of 2 Vec\n\nx1 = Vec{Int32}(1.0, 2.0, 3.0) x2 = Vec{Int32}(1.0, 2.0, 3.0) println(x1 ⋅ x2)\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.at-Tuple{Ray, Real}","page":"Home","title":"RayTracingWeekend.at","text":"at(ray, t) returns the point in 3D of ray at t. \n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_camera-Tuple{}","page":"Home","title":"RayTracingWeekend.get_camera","text":"Create a camera object from aspectratio, viewportheight and focal_length\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_hit_record-Tuple{Material}","page":"Home","title":"RayTracingWeekend.get_hit_record","text":"Get a HitRecord2 object with default values, and a given material (since material is abstract).\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_hit_record-Tuple{}","page":"Home","title":"RayTracingWeekend.get_hit_record","text":"Get a HitRecord object with default values.\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_ray-Tuple{Camera, Float32, Float32}","page":"Home","title":"RayTracingWeekend.get_ray","text":"Create a ray based on u, v inputs on the camera\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.get_sampled_color-Tuple{ColorTypes.RGB, Int32}","page":"Home","title":"RayTracingWeekend.get_sampled_color","text":"get_sampled_color applies gamma correction and scales the pixel color by the number of samples taken.\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.hit!-Tuple{Union{Sphere, Sphere2}, Ray, Float32, Float32, Union{HitRecord, HitRecord2}}","page":"Home","title":"RayTracingWeekend.hit!","text":"hit! function for sphere, calculates the impact location, normal etc on HitRecord `rec`\nfor the `ray`. \n- This function will update values on rec on a successful hit.\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.hit-Tuple{Vector{<:Hittable}, Ray, Float32, Float32, Union{HitRecord, HitRecord2}}","page":"Home","title":"RayTracingWeekend.hit","text":"Apply ray hit on all the objects in the scene. \n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.len-Tuple{RayTracingWeekend.AbstractXYZ}","page":"Home","title":"RayTracingWeekend.len","text":"len(p1::AbstractXYZ) -> Real\n\nReturns the √(x² + y² + z²)\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.len_squared-Tuple{RayTracingWeekend.AbstractXYZ}","page":"Home","title":"RayTracingWeekend.len_squared","text":"len_squared(p1::XYZ) -> Real\n\nReturns x² + y² + z²\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.pixel_color-Tuple{Point}","page":"Home","title":"RayTracingWeekend.pixel_color","text":"pixel_color (p::Point) -> ::Point{Int8} Return an RGB pixel color for the input point p where p.x, p.y and p.z is 0-1 range.\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.random_vector-Tuple{Any, Any}","page":"Home","title":"RayTracingWeekend.random_vector","text":"random vector with values between min and max\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.set_hit_record-Tuple{HitRecord, HitRecord}","page":"Home","title":"RayTracingWeekend.set_hit_record","text":"Set the source HitRecord to be same as the destination HitRecord.\nEquivalent of copy constructor in C++. (Harish: maybe slow?)\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.set_hit_record-Tuple{HitRecord, Point, Vec, Float32, Bool}","page":"Home","title":"RayTracingWeekend.set_hit_record","text":"Set HitRecord `rec` to the arguments passed.\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.set_hit_record-Tuple{HitRecord2, HitRecord2}","page":"Home","title":"RayTracingWeekend.set_hit_record","text":"Set the source HitRecord2 to be same as the destination HitRecord2.\nEquivalent of copy constructor in C++. (Harish: maybe slow?)\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.set_hit_record-Tuple{HitRecord2, Point, Vec, Float32, Bool, Material}","page":"Home","title":"RayTracingWeekend.set_hit_record","text":"sethitrecord sets fields inside HitRecord2 rec to the arguments passed\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.sky_color-Tuple{Ray}","page":"Home","title":"RayTracingWeekend.sky_color","text":"The skycolor(ray) function linearly blends white and blue depending on the height of the y coordinate after scaling the ray direction to unit length.    skycolor(r::Ray) -> ::RGB{Float32}\n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.to_point-Tuple{Vec}","page":"Home","title":"RayTracingWeekend.to_point","text":"Convert a vec to a point \n\n\n\n\n\n","category":"method"},{"location":"#RayTracingWeekend.to_vec-Tuple{Point}","page":"Home","title":"RayTracingWeekend.to_vec","text":"Convert a point to a vector (subtract from Vec(0.0, 0.0, 0.0)) \n\n\n\n\n\n","category":"method"}]
}
